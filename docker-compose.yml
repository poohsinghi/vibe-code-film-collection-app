version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: film_collection_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: film_collection_db
      POSTGRES_USER: filmuser
      POSTGRES_PASSWORD: filmpass123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U filmuser -d film_collection_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: film_collection_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://filmuser:filmpass123@db:5432/film_collection_db
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      OMDB_API_KEY: ${OMDB_API_KEY}
      TMDB_API_KEY: ${TMDB_API_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    command: npm run dev

  # Optional: Database Admin Tool
  adminer:
    image: adminer:4-standalone
    container_name: film_collection_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      ADMINER_DEFAULT_SERVER: db

volumes:
  postgres_data:
    driver: local
